<script setup lang="ts">
import { ref } from 'vue';
const isOpen = ref(false)

 function sum (count) {
    if (count < 1) return 0
    return [
      {
        cost: 0.8,
        min: 0,
        max: 10
      },
      {
        cost: 0.25,
        min: 10,
        max: 50
      },
      {
        cost: 0.2,
        min: 50,
        max: 100
      },
    ].reduceRight((acc, { cost, min, max }) => {
      if (count < min) return acc
      acc += (count - min) * cost
      count = min
      return acc
    }, 0)
  }

</script>

<template>
  <div style="width: 300px;">
    <button style="width: 100%; height: 40px;" @click="isOpen = !isOpen">man</button>
    <div class="content" :class="{ open: isOpen }">
      <div class="content-extend">
        <p style="word-break: break-all;margin: 0; padding:12px 16px; text-align: justify;">
          这是文字
        </p>
      </div>
    </div>
  </div>
</template>

<style scoped lang="scss">
.content {
  display: grid;
  grid-template-rows: 0fr;
  box-sizing: border-box;
  width: 100%;
  border-radius: 5px;
  background-color: rgba(0, 0, 0, 0.5);
  transition: all 0.3s;
  overflow: hidden;

  &-extend {
    margin: 0;
    padding: 0;
    min-height: 0;
  }

  &.open {
    grid-template-rows: 1fr;
  }
}
</style>



const datalist = [
  {
    "key": "Free",
    "tiers": [
      {
        "value": 0,
        "step": 5
      },
      {
        "value": 5,
        "step": 5
      }
    ]
  },
  {
    "key": "Basic",
    "tiers": [
      {
        "value": 10,
        "step": 40
      },
      {
        "value": 50,
        "step": 50
      },
      {
        "value": 100,
        "step": 100
      }
    ]
  },
  {
    "key": "Pro",
    "tiers": [
      {
        "value": 500,
        "step": 100
      },
      {
        "value": 1000,
        "step": 100
      }
    ]
  },
  // {
  //   "key": "Business",
  //   "tiers": [
  //     {
  //       "value": 5000,
  //       "step": 100
  //     },
  //     {
  //       "value": 10000,
  //       "step": 100
  //     }
  //   ]
  // },
  // {
  //   "key": "Enterprise",
  //   "tiers": [
  //     {
  //       "value": 50000,
  //       "step": 100
  //     },
  //     {
  //       "value": 100000,
  //       "step": 100
  //     }
  //   ]
  // }
]



function trspoint(list: any[]) {
  const pf = 100 / list.length


  return list.reduce((acc, { tiers }, index) => {
    const width = (index + 1) * pf

    const _width = acc[acc.length - 1]?.value || 0

    // (width - _width) / tiers.length

    const sub = tiers.map((it, idx) => ({
      value: (width - _width) / tiers.length * (idx + 1) + _width,
      step: 1
    }))

    acc.push(...[...sub, { value: width, step: 1 }].sort())
    return acc
  }, [])
}
